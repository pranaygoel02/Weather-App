//{weatherData.Temperature.Metric.Value}

import React,{useState,useEffect} from 'react'
import axios from 'axios';
import CurrentConditions from '../../utils/CurrentConditions'
import { Link, useParams } from 'react-router-dom'
import AirIcon from '@mui/icons-material/Air';
import WaterIcon from '@mui/icons-material/Water';
import WbSunnyOutlinedIcon from '@mui/icons-material/WbSunnyOutlined';
import GrainOutlinedIcon from '@mui/icons-material/GrainOutlined';
import ArrowDropUpOutlinedIcon from '@mui/icons-material/ArrowDropUpOutlined';
import OpenInNewOutlinedIcon from '@mui/icons-material/OpenInNewOutlined';
import './SearchWeather.css'

const SearchWeather = () => {
  const {id,city,state,country} = useParams();
  const {weatherData} = CurrentConditions(id);
  // const [weatherData,setWeatherData] = useState([])
  // const apikey = 'XMUYtoZGyj4nn6oqiFvdadAtS8hKS9b6';
  // const url = `http://dataservice.accuweather.com/currentconditions/v1/${id}?details=true&apikey=${apikey}`
  // console.log(url);
  // useEffect(()=>{
  //     axios.get(url).then(res=>res.data).then(data => {
  //         setWeatherData(data[0])
  //         console.log(weatherData);
  //         console.log('data[0]',data[0]);
  //     })
  // },[id])
  
  console.log('weatherData: ',weatherData);
  console.log('weatherData: ',weatherData.CloudCover);
  return (
    <div className='search-weather'>
      <div className='weather-detail-head flex-row'>
        <div className='date'>
          <h1>{city}</h1>
          <p>{state}, {country}</p>
        </div>
        <div>
          <h1>{weatherData.Temperature.Metric.Value}Â°{weatherData.Temperature.Metric.Unit}</h1>
          <p>{weatherData.WeatherText} | {weatherData.RealFeelTemperatureShade.Metric.Phrase}</p>
        </div>
      </div>
      {/* <div>
        <div className='flex-row weather-detail-head'>
          <h2>Today's Overview</h2>
          <Link to={"more-details"}>More Details<OpenInNewOutlinedIcon/></Link>
        </div>
        <ul className='weather-detail-list flex-row'>
          <li>
            <div className='weather-card flex-row'>
              <AirIcon sx={{'font-size':50}} className='weather-icon'/>
              <div className='weather-detail'>
                <p className='weather-subhead'>Wind Speed</p>
                <h1 className='weather-val'>{weatherData.Wind.Speed.Metric.Value} {weatherData.Wind.Speed.Metric.Unit}</h1>
              </div>
            </div>
          </li>
          <li>
            <div className='weather-card flex-row'>
              <GrainOutlinedIcon sx={{'font-size':50}} className='weather-icon'/>
              <div className='weather-detail'>
                <p className='weather-subhead'>Precipitation</p>
                <h1 className='weather-val'>{weatherData.Precip1hr.Metric.Value} {weatherData.Precip1hr.Metric.Unit}</h1>
              </div>
            </div>
          </li>
          <li>
            <div className='weather-card flex-row'>
              <WaterIcon sx={{'font-size':50}} className='weather-icon'/>
              <div className='weather-detail'>
                <p className='weather-subhead'>Pressure</p>
                <h1 className='weather-val'>{weatherData.Pressure.Metric.Value} {weatherData.Pressure.Metric.Unit}</h1>
              </div>
            </div>
          </li>
          <li>
            <div className='weather-card flex-row'>
              <WbSunnyOutlinedIcon sx={{'font-size':50}} className='weather-icon'/>
              <div className='weather-detail'>
                <p className='weather-subhead'>UV Index</p>
                <h1 className='weather-val'>{weatherData.UVIndex} {weatherData.UVIndex !== 0 && <ArrowDropUpOutlinedIcon className={weatherData.UVIndexText === 'Low' ? 'low' : 'high'}/>}</h1>
              </div>
            </div>
          </li>
        </ul>
      </div> */}
    </div>
  )
}

export default SearchWeather




[
{
"LocalObservationDateTime": "2022-09-11T20:47:00+02:00",
"EpochTime": 1662922020,
"WeatherText": "Mostly clear",
"WeatherIcon": 34,
"HasPrecipitation": false,
"PrecipitationType": null,
"IsDayTime": false,
"Temperature": {2 items},
"RealFeelTemperature": {2 items},
"RealFeelTemperatureShade": {2 items},
"RelativeHumidity": 61,
"IndoorRelativeHumidity": 61,
"DewPoint": {2 items},
"Wind": {
"Direction": {
"Degrees": 135,
"Localized": "SE",
"English": "SE"
},
"Speed": {
"Metric": {
"Value": 11.7,
"Unit": "km/h",
"UnitType": 7
},
"Imperial": {
"Value": 7.3,
"Unit": "mi/h",
"UnitType": 9
}
}
},
"WindGust": {
"Speed": {
"Metric": {
"Value": 20.5,
"Unit": "km/h",
"UnitType": 7
},
"Imperial": {
"Value": 12.7,
"Unit": "mi/h",
"UnitType": 9
}
}
},
"UVIndex": 0,
"UVIndexText": "Low",
"Visibility": {
"Metric": {
"Value": 16.1,
"Unit": "km",
"UnitType": 6
},
"Imperial": {
"Value": 10,
"Unit": "mi",
"UnitType": 2
}
},
"ObstructionsToVisibility": "",
"CloudCover": 30,
"Ceiling": {
"Metric": {
"Value": 6248,
"Unit": "m",
"UnitType": 5
},
"Imperial": {
"Value": 20500,
"Unit": "ft",
"UnitType": 0
}
},
"Pressure": {
"Metric": {
"Value": 1017,
"Unit": "mb",
"UnitType": 14
},
"Imperial": {
"Value": 30.03,
"Unit": "inHg",
"UnitType": 12
}
},
"PressureTendency": {
"LocalizedText": "Steady",
"Code": "S"
},
"Past24HourTemperatureDeparture": {
"Metric": {
"Value": 2.6,
"Unit": "C",
"UnitType": 17
},
"Imperial": {
"Value": 5,
"Unit": "F",
"UnitType": 18
}
},
"ApparentTemperature": {
"Metric": {
"Value": 19.4,
"Unit": "C",
"UnitType": 17
},
"Imperial": {
"Value": 67,
"Unit": "F",
"UnitType": 18
}
},
"WindChillTemperature": {
"Metric": {
"Value": 20,
"Unit": "C",
"UnitType": 17
},
"Imperial": {
"Value": 68,
"Unit": "F",
"UnitType": 18
}
},
"WetBulbTemperature": {
"Metric": {
"Value": 15.8,
"Unit": "C",
"UnitType": 17
},
"Imperial": {
"Value": 60,
"Unit": "F",
"UnitType": 18
}
},
"Precip1hr": {
"Metric": {
"Value": 0,
"Unit": "mm",
"UnitType": 3
},
"Imperial": {
"Value": 0,
"Unit": "in",
"UnitType": 1
}
},
"PrecipitationSummary": {
"Precipitation": {
"Metric": {
"Value": 0,
"Unit": "mm",
"UnitType": 3
},
"Imperial": {
"Value": 0,
"Unit": "in",
"UnitType": 1
}
},
"PastHour": {
"Metric": {
"Value": 0,
"Unit": "mm",
"UnitType": 3
},
"Imperial": {
"Value": 0,
"Unit": "in",
"UnitType": 1
}
},
"Past3Hours": {
"Metric": {
"Value": 0,
"Unit": "mm",
"UnitType": 3
},
"Imperial": {
"Value": 0,
"Unit": "in",
"UnitType": 1
}
},
"Past6Hours": {
"Metric": {
"Value": 0,
"Unit": "mm",
"UnitType": 3
},
"Imperial": {
"Value": 0,
"Unit": "in",
"UnitType": 1
}
},
"Past9Hours": {
"Metric": {
"Value": 0,
"Unit": "mm",
"UnitType": 3
},
"Imperial": {
"Value": 0,
"Unit": "in",
"UnitType": 1
}
},
"Past12Hours": {
"Metric": {
"Value": 0,
"Unit": "mm",
"UnitType": 3
},
"Imperial": {
"Value": 0,
"Unit": "in",
"UnitType": 1
}
},
"Past18Hours": {
"Metric": {
"Value": 0,
"Unit": "mm",
"UnitType": 3
},
"Imperial": {
"Value": 0,
"Unit": "in",
"UnitType": 1
}
},
"Past24Hours": {
"Metric": {
"Value": 0,
"Unit": "mm",
"UnitType": 3
},
"Imperial": {
"Value": 0,
"Unit": "in",
"UnitType": 1
}
}
},
"TemperatureSummary": {
"Past6HourRange": {
"Minimum": {
"Metric": {
"Value": 20.2,
"Unit": "C",
"UnitType": 17
},
"Imperial": {
"Value": 68,
"Unit": "F",
"UnitType": 18
}
},
"Maximum": {
"Metric": {
"Value": 22.6,
"Unit": "C",
"UnitType": 17
},
"Imperial": {
"Value": 73,
"Unit": "F",
"UnitType": 18
}
}
},
"Past12HourRange": {
"Minimum": {
"Metric": {
"Value": 12.8,
"Unit": "C",
"UnitType": 17
},
"Imperial": {
"Value": 55,
"Unit": "F",
"UnitType": 18
}
},
"Maximum": {
"Metric": {
"Value": 22.6,
"Unit": "C",
"UnitType": 17
},
"Imperial": {
"Value": 73,
"Unit": "F",
"UnitType": 18
}
}
},
"Past24HourRange": {
"Minimum": {
"Metric": {
"Value": 11.6,
"Unit": "C",
"UnitType": 17
},
"Imperial": {
"Value": 53,
"Unit": "F",
"UnitType": 18
}
},
"Maximum": {
"Metric": {
"Value": 22.6,
"Unit": "C",
"UnitType": 17
},
"Imperial": {
"Value": 73,
"Unit": "F",
"UnitType": 18
}
}
}
},
"MobileLink": "http://www.accuweather.com/en/fr/paris/623/current-weather/623?lang=en-us",
"Link": "http://www.accuweather.com/en/fr/paris/623/current-weather/623?lang=en-us"
}
]